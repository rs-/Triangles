(*

   Benedikt Ahrens and R√©gis Spadotti

   Terminal semantics for codata types in intensional Martin-L√∂f type theory

   http://arxiv.org/abs/1401.1053

*)

(*

  Content of this file:

  - definition of comodule obtained by precomposing with product
  - corresponding action on morphisms of comodules

*)

Require Import Category.RComod.
Require Import Theory.Category.
Require Import Theory.Functor.
Require Import Theory.Isomorphism.
Require Import Theory.RelativeComonad.
Require Import Theory.RelativeComonadWithCut.
Require Import Theory.Comodule.
Require Import Theory.Product.
Require Import Theory.ProductPreservingFunctor.

Generalizable All Variables.

(*------------------------------------------------------------------------------
  -- Ôº∞Ôº≤Ôº•Ôº£ÔºØÔº≠Ôº∞ÔºØÔº≥Ôº©Ôº¥Ôº©ÔºØÔºÆ  Ôº∑Ôº©Ôº¥Ôº®  Ôº∞Ôº≤ÔºØÔº§ÔºµÔº£Ôº¥
  ----------------------------------------------------------------------------*)
(** * Precomposition with product **)

(** ** Definitions **)

Section PrecompositionWithProduct.

  Context `{BinaryProduct ùíû} `{BinaryProduct ùíü} {F : Functor ùíû  ùíü}
          {E : ùíû} `{!ProductPreservingFunctor F} {T : RelativeComonadWithCut F E}
          {‚Ñ∞ : Category} (M : Comodule T ‚Ñ∞).

  Program Definition precomposition_with_product : Comodule T ‚Ñ∞ :=
    Comodule.make  ‚¶É M        ‚âî Œª C ‚àô M (E √ó C)
                   ; mcobind  ‚âî Œª A B ‚àô Œª f ‚Ü¶ M‚ãÖmcobind (T‚ãÖextend(f)) ‚¶Ñ.
  Next Obligation.
    intros f g eq_fg. now rewrite eq_fg.
  Qed.
  Next Obligation.
    rewrite cut_counit. rewrite <- ‚àò-√ó. rewrite <- compose_assoc. rewrite iso_right.
    rewrite left_id. rewrite mcobind_counit. reflexivity.
  Qed.
  Next Obligation.
    rewrite mcobind_mcobind. apply Œ†.cong. repeat rewrite compose_assoc.
    rewrite ‚àò-√ó. rewrite cut_cobind. unfold Extend. simpl.
    repeat rewrite compose_assoc. rewrite counit_cobind.
    repeat rewrite <- compose_assoc. rewrite FœÄ‚ÇÅ_œÜ_inv. rewrite œÄ‚ÇÅ_compose. reflexivity.
  Qed.

End PrecompositionWithProduct.

Arguments precomposition_with_product {_ _ _ _ _} _ {_ _ _} _.

Notation "M [ E '√ó‚îÄ' ] " := (precomposition_with_product E M) (at level 0).

(** ** Precomposition with product on morphisms **)
Section Morphisms.

  Context `{BinaryProduct ùíû} `{BinaryProduct ùíü} (F : Functor ùíû  ùíü)
          (E : ùíû) `{!ProductPreservingFunctor F} (T : RelativeComonadWithCut F E)
          (‚Ñ∞ : Category) (M : Comodule T ‚Ñ∞) (N : Comodule T ‚Ñ∞) (Œ± : M ‚áí N).

  Program Definition precomposition_with_product_mor : ‚Äµ M[E√ó‚îÄ] ‚áí N[E√ó‚îÄ] ‚Ä≤ :=
    Comodule.make ‚¶É Œ± ‚âî Œª A ‚àô Œ± (E √ó A) ‚¶Ñ.
  Next Obligation.
    now rewrite Œ±_commutes.
  Qed.

End Morphisms.

Arguments precomposition_with_product_mor {_ _ _ _ _} _ {_ _ _ _ _} _.

Notation "Œ± Ôºª E '√ó‚îÄ' ÔºΩ" := (precomposition_with_product_mor E Œ±) (at level 0).
